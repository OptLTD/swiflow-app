version: '3'

includes:
  common: ../Taskfile.yml

tasks:
  build:
    dir: app
    summary: Builds the application for Windows
    deps:
      - task: common:go:mod:tidy
      - task: common:build:frontend
        vars:
          BUILD_FLAGS:
            ref: .BUILD_FLAGS
          PRODUCTION:
            ref: .PRODUCTION
      - task: common:generate:icons
      - task: common:update:build-assets
    cmds:
      - task: generate:syso
      - go build {{.BUILD_FLAGS}} -o ../{{.BIN_DIR}}/{{.APP_NAME}}.exe
      - cmd: powershell Remove-item *.syso
        platforms: [windows]
      - cmd: rm -f *.syso
        platforms: [linux, darwin]
    vars:
      BUILD_FLAGS: '{{if eq .PRODUCTION "true"}}-tags production -trimpath -buildvcs=false -ldflags="-w -s -H windowsgui"{{else}}-buildvcs=false -gcflags=all="-l"{{end}}'
    env:
      GOOS: windows
      CGO_ENABLED: 0
      GOARCH: '{{.ARCH | default ARCH}}'
      PRODUCTION: '{{.PRODUCTION | default "false"}}'

  package:
    summary: Packages a production build of the application
    cmds:
      - task: nsis:installer

  package:msix:
    summary: Packages a production build of the application as MSIX
    cmds:
      - task: msix:package

  generate:syso:
    summary: Generates Windows `.syso` file
    dir: build
    cmds:
      - wails3 generate syso -arch {{.ARCH}} -icon windows/icon.ico -manifest windows/wails.exe.manifest -info windows/info.json -out ../app/wails_windows_{{.ARCH}}.syso
    vars:
      ARCH: '{{.ARCH | default ARCH}}'

  nsis:installer:
    summary: Creates an NSIS installer
    dir: build/windows/nsis
    deps:
      - task: build
        vars:
          PRODUCTION: "true"
    cmds:
      - cmd: powershell New-Item -ItemType Directory -Force "{{.ROOT_DIR}}/build/exe"
        platforms: [windows]
      - cmd: mkdir -p "{{.ROOT_DIR}}/build/exe"
        platforms: [linux, darwin]
      # Create the Microsoft WebView2 bootstrapper if it doesn't exist
      - wails3 generate webview2bootstrapper -dir "{{.ROOT_DIR}}/build/windows/nsis"
      - makensis -DINFO_PROJECTNAME="{{.APP_NAME}}" -DARG_WAILS_{{.ARG_FLAG}}_BINARY="{{.ROOT_DIR}}/{{.BIN_DIR}}/{{.APP_NAME}}.exe" project.nsi
    vars:
      ARCH: '{{.ARCH | default ARCH}}'
      ARG_FLAG: '{{if eq .ARCH "amd64"}}AMD64{{else}}ARM64{{end}}'

  msix:package:
    summary: Creates an MSIX package
    deps:
      - task: build
        vars:
          PRODUCTION: "true"
    cmds:
      - |-
        wails3 tool msix \
          --config "{{.ROOT_DIR}}/wails.json" \
          --name "{{.APP_NAME}}" \
          --executable "{{.ROOT_DIR}}/{{.BIN_DIR}}/{{.APP_NAME}}.exe" \
          --arch "{{.ARCH}}" \
          --out "{{.ROOT_DIR}}/{{.BIN_DIR}}/{{.APP_NAME}}-{{.ARCH}}.msix" \
          {{if .CERT_PATH}}--cert "{{.CERT_PATH}}"{{end}} \
          {{if .PUBLISHER}}--publisher "{{.PUBLISHER}}"{{end}} \
          {{if .USE_MSIX_TOOL}}--use-msix-tool{{else}}--use-makeappx{{end}}
    vars:
      ARCH: '{{.ARCH | default ARCH}}'
      CERT_PATH: '{{.CERT_PATH | default ""}}'
      PUBLISHER: '{{.PUBLISHER | default ""}}'
      USE_MSIX_TOOL: '{{.USE_MSIX_TOOL | default "false"}}'

  install:msix:tools:
    summary: Installs tools required for MSIX packaging
    cmds:
      - wails3 tool msix-install-tools

  run:
    cmds:
      - '{{.BIN_DIR}}/{{.APP_NAME}}.exe'

  # ----------------------------
  # Signing tasks (require signtool)
  # ----------------------------
  sign:exe:
    summary: Signs the built Windows executable using signtool
    cmds:
      - cmd: >-
          signtool sign /fd SHA256 /a
          {{if .PFX_PATH}}/f "{{.PFX_PATH}}"{{end}}
          {{if .PFX_PASSWORD}}/p "{{.PFX_PASSWORD}}"{{end}}
          {{if .TIMESTAMP_URL}}/tr "{{.TIMESTAMP_URL}}" /td SHA256{{end}}
          "{{.BIN_DIR}}/{{.APP_NAME}}.exe"
        platforms: [windows]
    vars:
      PFX_PATH: '{{.PFX_PATH | default ""}}'
      PFX_PASSWORD: '{{.PFX_PASSWORD | default ""}}'
      TIMESTAMP_URL: '{{.TIMESTAMP_URL | default ""}}'

  sign:installer:
    summary: Signs the NSIS installer using signtool
    cmds:
      - cmd: >-
          signtool sign /fd SHA256 /a
          {{if .PFX_PATH}}/f "{{.PFX_PATH}}"{{end}}
          {{if .PFX_PASSWORD}}/p "{{.PFX_PASSWORD}}"{{end}}
          {{if .TIMESTAMP_URL}}/tr "{{.TIMESTAMP_URL}}" /td SHA256{{end}}
          "build/exe/{{.APP_NAME}}-{{.ARCH}}-installer.exe"
        platforms: [windows]
    vars:
      ARCH: '{{.ARCH | default ARCH}}'
      PFX_PATH: '{{.PFX_PATH | default ""}}'
      PFX_PASSWORD: '{{.PFX_PASSWORD | default ""}}'
      TIMESTAMP_URL: '{{.TIMESTAMP_URL | default ""}}'

  sign:msix:
    summary: Signs the MSIX package using signtool
    cmds:
      - cmd: >-
          signtool sign /fd SHA256 /a
          {{if .PFX_PATH}}/f "{{.PFX_PATH}}"{{end}}
          {{if .PFX_PASSWORD}}/p "{{.PFX_PASSWORD}}"{{end}}
          {{if .TIMESTAMP_URL}}/tr "{{.TIMESTAMP_URL}}" /td SHA256{{end}}
          "{{.BIN_DIR}}/{{.APP_NAME}}-{{.ARCH}}.msix"
        platforms: [windows]
    vars:
      ARCH: '{{.ARCH | default ARCH}}'
      PFX_PATH: '{{.PFX_PATH | default ""}}'
      PFX_PASSWORD: '{{.PFX_PASSWORD | default ""}}'
      TIMESTAMP_URL: '{{.TIMESTAMP_URL | default ""}}'

  # ----------------------------
  # Release pipelines (build → sign exe → package → sign installer)
  # ----------------------------
  release:amd64:
    summary: Full release pipeline for Windows amd64 (NSIS)
    cmds:
      - task: build
        vars:
          PRODUCTION: "true"
          ARCH: amd64
      - task: sign:exe
      - task: nsis:installer
        vars:
          ARCH: amd64
      - task: sign:installer
        vars:
          ARCH: amd64

  release:arm64:
    summary: Full release pipeline for Windows arm64 (NSIS)
    cmds:
      - task: build
        vars:
          PRODUCTION: "true"
          ARCH: arm64
      - task: sign:exe
      - task: nsis:installer
        vars:
          ARCH: arm64
      - task: sign:installer
        vars:
          ARCH: arm64

  release:all:
    summary: Full Windows release pipeline for amd64 and arm64 (NSIS)
    cmds:
      - task: release:amd64
      - task: release:arm64
